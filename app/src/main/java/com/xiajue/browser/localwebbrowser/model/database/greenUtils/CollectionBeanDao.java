package com.xiajue.browser.localwebbrowser.model.database.greenUtils;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xiajue.browser.localwebbrowser.model.bean.CollectionBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECTION_BEAN".
*/
public class CollectionBeanDao extends AbstractDao<CollectionBean, String> {

    public static final String TABLENAME = "COLLECTION_BEAN";

    /**
     * Properties of entity CollectionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property AbsPath = new Property(1, String.class, "absPath", true, "ABS_PATH");
        public final static Property LastModifide = new Property(2, long.class, "lastModifide", false, "LAST_MODIFIDE");
    }


    public CollectionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CollectionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECTION_BEAN\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"ABS_PATH\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 1: absPath
                "\"LAST_MODIFIDE\" INTEGER NOT NULL );"); // 2: lastModifide
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CollectionBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String absPath = entity.getAbsPath();
        if (absPath != null) {
            stmt.bindString(2, absPath);
        }
        stmt.bindLong(3, entity.getLastModifide());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CollectionBean entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String absPath = entity.getAbsPath();
        if (absPath != null) {
            stmt.bindString(2, absPath);
        }
        stmt.bindLong(3, entity.getLastModifide());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public CollectionBean readEntity(Cursor cursor, int offset) {
        CollectionBean entity = new CollectionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // absPath
            cursor.getLong(offset + 2) // lastModifide
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CollectionBean entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAbsPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastModifide(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CollectionBean entity, long rowId) {
        return entity.getAbsPath();
    }
    
    @Override
    public String getKey(CollectionBean entity) {
        if(entity != null) {
            return entity.getAbsPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CollectionBean entity) {
        return entity.getAbsPath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
